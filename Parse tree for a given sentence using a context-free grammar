class Node:
    def __init__(self, label, children=None):
        self.label = label
        self.children = children if children else []

    def __str__(self):
        if not self.children:
            return self.label
        else:
            return f"{self.label}({', '.join(str(child) for child in self.children)})"

def generate_parse_tree(grammar, sentence):
    tokens = sentence.split()
    chart = [[None for _ in range(len(tokens) + 1)] for _ in range(len(tokens) + 1)]
    for i in range(len(tokens)):
        for key in grammar:
            if tokens[i] in grammar[key]:
                chart[i][i+1] = Node(key, [Node(tokens[i])])

    for width in range(2, len(tokens) + 1):
        for start in range(len(tokens) - width + 1):
            end = start + width
            for mid in range(start + 1, end):
                for key in grammar:
                    if len(grammar[key]) == 2:
                        left, right = grammar[key]
                        if chart[start][mid] and chart[mid][end]:
                            if chart[start][mid].label == left and chart[mid][end].label == right:
                                chart[start][end] = Node(key, [chart[start][mid], chart[mid][end]])
                                break
    return chart[0][len(tokens)]

def main():
    # Define a simple context-free grammar
    grammar = {
        'S': ['NP VP'],
        'NP': ['Det N', 'N'],
        'VP': ['V NP'],
        'Det': ['the', 'a'],
        'N': ['cat', 'dog'],
        'V': ['chased', 'ate']
    }

    # Test sentence
    sentence = "the cat chased the dog"

    # Generate parse tree
    parse_tree = generate_parse_tree(grammar, sentence)

    # Print the parse tree
    print(parse_tree)

if __name__ == "__main__":
    main()
